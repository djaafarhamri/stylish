datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Model
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  phone     String
  addresses Address[]
  role      UserRole  @default(CUSTOMER)
  orders    Order[]
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id         String  @id @default(uuid())
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String  @default("Algeria")
  isDefault  Boolean @default(false)
  user       User?   @relation(fields: [userId], references: [id])
  userId     String?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String           @id @default(uuid())
  name         String
  description  String
  price        Decimal
  salePrice    Decimal?
  category     Category         @relation(fields: [categoryName], references: [name])
  categoryName String
  images       Image[]          @relation("ProductImages")
  mainImage    Image            @relation("ProductMainImage", fields: [mainImageId], references: [id])
  mainImageId  String           @unique
  status       String           @default("active")
  inStock      Boolean          @default(true)
  inNew        Boolean          @default(true)
  isFeatured   Boolean          @default(false)
  rating       Float            @default(0)
  reviewCount  Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  variants     ProductVariant[]
}

model Image {
  id        String @id @default(uuid())
  url       String
  public_id String

  product   Product? @relation("ProductImages", fields: [productId], references: [id])
  productId String?

  mainProduct Product? @relation("ProductMainImage")
}

model ProductVariant {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   String
  size      String
  quantity  Int     @default(0)

  CartItem CartItem[]

  OrderItem OrderItem[]
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Color {
  id   String @id @default(uuid())
  name String @unique
  hex  String

  ProductVariant ProductVariant[]
}

// Order Model
model Order {
  id                Int           @id @default(autoincrement())
  user              User?         @relation(fields: [userId], references: [id])
  userId            String?
  guestFirstName    String?
  guestLastName     String?
  guestPhone        String?
  guestEmail        String?
  shippingAddress   Address       @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
  isGuest           Boolean
  items             OrderItem[]
  total             Decimal
  paymentMethod     PaymentMethod @default(COD)
  cardNumber        String?
  cardName          String?
  expiryDate        String?
  cvv               String?
  notes             String?
  status            OrderStatus   @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// OrderItem Model
model OrderItem {
  id        String         @id @default(uuid())
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
}

// Cart Model
model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// CartItem Model
model CartItem {
  id        String         @id @default(uuid())
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
}

model Store {
  id          String @id @default(uuid())
  name        String
  email       String
  phone       String
  currency    String
  address     String
  description String
}

model SEO {
  id String @id @default(uuid())
  title String
  description String
  keywords String @db.VarChar()
}

model shipping {
  id String @id @default(uuid())
  free Boolean
  threshold Int
  express Boolean
  fee Int
}

model Payment {
  id String @id @default(uuid())
  credit Boolean
  paypal Boolean
  applepay Boolean
  googlepay Boolean
}
model Notifications {
  id String @id @default(uuid())
  orderConfirmation Boolean
  shippingConfirmation Boolean
  orderCancellation Boolean
  abandonedCart Boolean
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum PaymentMethod {
  CREDIT
  PAYPAL
  GOOGLEPAY
  APPLEPAY
  COD
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
